import os
import requests
import subprocess
import webbrowser
from dotenv import load_dotenv

# Load environment variables from .env file if available
load_dotenv()

# Configuration settings from environment variables or defaults
OLLAMA_URL = os.getenv("OLLAMA_URL")
MODEL_NAME = os.getenv("MODEL_NAME")
OPENSCAD_PATH = os.getenv("OPENSCAD_PATH")
CURA_PATH = os.getenv("CURA_PATH")  


def ask_question(question):
    """
    Send a query to the Ollama LLM and get the response, with error handling.
    """
    context = f"""
    You are an expert in creating 3D models using OpenSCAD. Based on the user's prompt, generate only the OpenSCAD code required to create the described 3D model. Do not include any explanations, comments, or Markdown formatting. Provide only the OpenSCAD code.
    User's prompt: {question}
    """

    payload = {
        "model": MODEL_NAME,
        "messages": [
            {"role": "system", "content": context},
            {"role": "user", "content": question}
        ],
        "stream": False
    }

    headers = {
        "Content-Type": "application/json"
    }

    try:
        print(f"Sending prompt to API: {context}")
        response = requests.post(OLLAMA_URL, headers=headers, json=payload)
        response.raise_for_status()
        data = response.json()
        
        # Debugging: Print the entire response
        print("API Response:", data)
        
        # Check if 'content' has a value
        if 'message' in data and 'content' in data['message'] and data['message']['content']:
            return data['message']['content']
        else:
            print("No content generated by the model.")
            return None
    except requests.exceptions.HTTPError as err:
        print(f"HTTP error occurred: {err}")
    except Exception as err:
        print(f"An error occurred: {err}")

    return None

def clean_openscad_script(script):
    """
    Ensure the script contains only valid OpenSCAD code.
    """
    clean_script = script.strip()
    
    # Remove Markdown code block markers
    clean_script = clean_script.replace('```scad', '').replace('```', '').strip()
    
    return clean_script

def generate_3d_model(openscad_script, output_file="output.stl"):
    script_file = "model.scad"
    with open(script_file, "w") as file:
        file.write(openscad_script)
    
    print(f"Sanitized OpenSCAD script:\n{openscad_script}")

    # Run OpenSCAD to generate the 3D model and capture output
    try:
        result = subprocess.run([OPENSCAD_PATH, "-o", output_file, script_file], check=True, capture_output=True, text=True)
        print("OpenSCAD Output:", result.stdout)
        print("OpenSCAD Error Output:", result.stderr)
    except subprocess.CalledProcessError as e:
        print(f"OpenSCAD failed with error: {e.stderr}")
        print(f"Return code: {e.returncode}")
        raise

def open_in_cura(stl_file):
    """
    Open the generated STL file in Cura for preview.
    """
    try:
        subprocess.run([CURA_PATH, stl_file], check=True)
    except subprocess.CalledProcessError as e:
        print(f"Failed to open in Cura: {e.stderr}")
    except FileNotFoundError:
        print("Cura executable not found. Please check the CURA_PATH.")

if __name__ == "__main__":
    user_prompt = input("Enter your prompt for the 3D model: ")
    openscad_script = ask_question(user_prompt)
    
    if openscad_script:
        print("OpenSCAD script generated:")
        print(openscad_script)
        
        # Clean the OpenSCAD script before generating the model
        clean_script = clean_openscad_script(openscad_script)
        output_file = "output.stl"
        generate_3d_model(clean_script, output_file)
        
        print("3D model generated and saved as output.stl")
        
        # Open the STL file in Cura for preview
        open_in_cura(output_file)
    else:
        print("Failed to generate OpenSCAD script.")
